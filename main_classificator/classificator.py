from sklearn.neural_network import MLPClassifier
import numpy as np


def simple_model(X, Y):
    clf = MLPClassifier(solver='lbfgs', alpha=1e-5,
                        hidden_layer_sizes=(5, 2), random_state=1)

    clf.fit(X, Y)
    return clf


def simple_example():
    from random import randint
    # X_train = [[-1., -2.]]
    # y = [0]
    X_train = []
    y = []

    for i in range(30):
        x_ = randint(-10, 10)
        y_ = randint(-10, 10)
        X_train.append([x_, y_])
        y.append(int(y_ - x_ >= 0))

    clf = simple_model(X_train, Y=y)

    X_test = [[0., 0.], [-1., -2.], [-2., -1.], [-1., -1.], [2., 1.]]
    prediction = clf.predict(X_test)
    y_test = [1, 0, 1, 1, 0]
    print(f"prediction result: result is correct - {np.array_equal(prediction, np.array(y_test))}")


if __name__ == '__main__':
    simple_example()