from random import randint

from torch import nn
import numpy as np
from main_classificator import ct
from main_classificator.classificator import ClassifArgs, pytorch_classification
from matplotlib import pyplot

from main_classificator.preprocessing.preproc_data import get_batch_num_by_label


def calc_best_alpha():
    alphas = np.arange(0.1, 1, 0.1)
    accuracy_results = []
    classif_args = ClassifArgs(
        num_of_batches=65,
        hidden_layers=[(ct.MIN_WINDOW_SIZE, 100), (100, ct.NUM_OF_CLASSES)],
        criterion=nn.MSELoss(),
        l_rate=0.1,
        percent_of_tasks_to_train=1)

    get_in_train_for_stats = get_batch_num_by_label(num_of_samples_for_each=3)

    for i in alphas:
        classif_args.l_rate = i
        accuracy_results.append(pytorch_classification(classif_args, full_train=False, predict=False,
                                                       get_in_train_for_stats=get_in_train_for_stats))

    pyplot.plot(alphas, accuracy_results)
    pyplot.show()


if __name__ == '__main__':
    calc_best_alpha()