from random import randint
from tqdm import tqdm
from torch import nn
import numpy as np
from main_classificator import ct
from main_classificator.classificator import ClassifArgs, pytorch_classification
from matplotlib import pyplot
import pandas as pd
from main_classificator.preprocessing.preproc_data import get_batch_num_by_label
from time import monotonic


def calc_stat_for_some_param(name_of_fig: str):
    # alphas = np.arange(0.02, 0.03, 0.001)
    # mid_layer_size = np.arange(3000, 5000, 100)
    step_size = np.arange(1, 60, 1)

    accuracy_results = []
    get_in_train_for_stats = get_batch_num_by_label(num_of_samples_for_each=3)

    classif_args = ClassifArgs(
        num_of_batches=65,
        hidden_layers=[(ct.MIN_WINDOW_SIZE, ct.BEST_MID_LAYER),
                       (ct.BEST_MID_LAYER, ct.NUM_OF_CLASSES)],
        criterion=nn.MSELoss(),
        l_rate=ct.BEST_ALPHA,
        percent_of_tasks_to_train=1)
    training_time = []
    for step in tqdm(step_size):
        start = monotonic()
        accuracy_results.append(pytorch_classification(classif_args, full_train=False, predict=False,
                                                       get_in_train_for_stats=get_in_train_for_stats,
                                                       no_printing=True, step_for_training=step))
        training_time.append(monotonic() - start)

    pyplot.plot(step_size, accuracy_results)
    pyplot.savefig(ct.add_path_to_stats(name_of_fig + "_accuracy.png"))
    pd.DataFrame({"x": step_size, "y": accuracy_results}).to_csv(ct.add_path_to_stats(name_of_fig + '_accuracy.csv'))
    pyplot.show()

    pyplot.plot(step_size, training_time)
    pyplot.savefig(ct.add_path_to_stats(name_of_fig + "_timing.png"))
    pd.DataFrame({"x": step_size, "y": training_time}).to_csv(ct.add_path_to_stats(name_of_fig + '_timing.csv'))
    pyplot.show()


def common_calc_stat():
    # get_in_train_for_stats = get_batch_num_by_label(num_of_samples_for_each=3)
    get_in_train_for_stats = [1031, 3080, 2186, 146, 2836, 2583, 920, 1304, 539, 2850, 675, 2725, 2730, 435, 53, 952, 1088, 1869, 973, 2256, 342,
     3160, 1371, 2144, 2273, 2275, 2917, 2664, 239, 1144]

    classif_args = ClassifArgs(
        num_of_batches=65,
        hidden_layers=[(ct.MIN_WINDOW_SIZE, ct.BEST_MID_LAYER),
                       (ct.BEST_MID_LAYER, ct.NUM_OF_CLASSES)],
        criterion=nn.MSELoss(),
        l_rate=ct.BEST_ALPHA,
        percent_of_tasks_to_train=1)

    accuracy = pytorch_classification(classif_args, full_train=False, predict=False,
                                      get_in_train_for_stats=get_in_train_for_stats,
                                      no_printing=False)
    print(accuracy)


def get_stats(name_of_file_with_stats: str):
    df = pd.read_csv(ct.add_path_to_stats(name_of_file_with_stats + '.csv'))
    return df


if __name__ == '__main__':
    calc_stat_for_some_param(name_of_fig="step_changing")
