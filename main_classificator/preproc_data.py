from os import listdir
from os.path import isfile, join
from typing import List, Mapping

from main_classificator import ct
import pandas as pd
from random import sample
from shutil import copy


def get_all_file_names(path_to_folder: str) -> List[str]:
    return [join(path_to_folder, f) for f in listdir(path_to_folder) if isfile(join(path_to_folder, f))]


def read_data_from_files(file_names: List[str]) -> Mapping[str, str]:
    def get_short_name(long_name: str) -> str:
        return long_name.split('/')[-1]
    all_data = {}
    for path in file_names:
        full_input = []
        with open(path, 'br') as file:
            full_input.append(file.read())
        assert len(full_input) == 1, f"len of input is not 1, but = {len(full_input)}"
        all_data[get_short_name(path)] = full_input[0]
        # TODO: figure out what to use: from numpy import unicode; unicode(...) ???
    return all_data


def read_dataset(path_to_folder: str) -> pd.DataFrame:
    file_names = get_all_file_names(path_to_folder)
    all_data = read_data_from_files(file_names)
    first_file = list(all_data.values())[0]
    return pd.DataFrame()


def read_labels(path_to_labels: str) -> pd.DataFrame:
    assert path_to_labels[-4:] == '.csv', f"wrong path entered {path_to_labels}"
    labels = pd.read_csv(path_to_labels)
    return labels


def get_sample_by_labels(labels_df: pd.DataFrame) -> pd.DataFrame:
    def proc_groups(name, group):
        return pd.DataFrame({ct.ID_COLUMN: [sample(list(group[ct.ID_COLUMN].values), ct.SAMPLE_SIZE)],
                             ct.CLASS_COLUMN: [name]})

    df = pd.concat([proc_groups(name, group) for name, group in labels_df.groupby([ct.CLASS_COLUMN])])
    return df


def copy_files_in_folder(df_with_ids: pd.DataFrame, src_folder: str, dst_folder: str):
    def copy_file(id_names: List[str]):
        for file_name in id_names:
            copy(src_folder + file_name + '.asm', dst_folder)
            copy(src_folder + file_name + '.bytes', dst_folder)
        return id_names
    df_with_ids[ct.ID_COLUMN].apply(copy_file)


def devide_train_sample_df():
    labels = read_labels(ct.get_path_to_train_labels_csv())
    samples = get_sample_by_labels(labels)
    copy_files_in_folder(df_with_ids=samples,
                         src_folder=ct.get_path_to_train_folder(),
                         dst_folder=ct.get_path_to_train_cut_folder())


if __name__ == '__main__':
    df_train = read_dataset(ct.get_path_to_train_cut_folder())
