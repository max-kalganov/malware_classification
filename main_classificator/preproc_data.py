from os import listdir
from os.path import isfile, join
from typing import List, Mapping

from main_classificator import ct
import pandas as pd
from random import sample, shuffle
from shutil import copy
import numpy as np

from main_classificator.utils import Extention, get_file_name_by_extention


def get_all_file_names(path_to_folder: str) -> List[str]:
    return [join(path_to_folder, f) for f in listdir(path_to_folder) if isfile(join(path_to_folder, f))]


def read_data_from_files(file_names: List[str]) -> Mapping[str, str]:
    def get_short_name(long_name: str) -> str:
        return long_name.split('/')[-1]
    all_data = {}
    for path in file_names:
        full_input = []
        with open(path, 'r', errors='ignore') as file:
            full_input.append(file.read())

        assert len(full_input) == 1, f"len of input is not 1, but = {len(full_input)}"
        all_data[get_short_name(path)] = full_input[0]
    assert len(file_names) == len(all_data.keys()), f"len of input {len(file_names)} " \
        f"is not the same to len of output {all_data.keys()}"
    return all_data


def read_data_in_dict(path_to_folder: str,
                 num_of_files: int = None,
                 ext: Extention = None,
                 shuffle_list: bool = False) -> Mapping[str, str]:
    file_names = get_all_file_names(path_to_folder)

    if ext:
        file_names = get_file_name_by_extention(file_names, ext)

    if shuffle_list:
        shuffle(file_names)

    if num_of_files:
        assert num_of_files > 0, f"wrong num of files = {num_of_files}"
        file_names = file_names[:num_of_files]

    all_data = read_data_from_files(file_names)
    return all_data


def get_dataset(all_data: Mapping[str, str]) -> pd.DataFrame:
    for k, v in all_data.items():
        print(f"{k} \n----\n {v}")


def read_labels(path_to_labels: str) -> pd.DataFrame:
    assert path_to_labels[-4:] == '.csv', f"wrong path entered {path_to_labels}"
    labels = pd.read_csv(path_to_labels)
    return labels


def get_sample_by_labels(labels_df: pd.DataFrame) -> pd.DataFrame:
    def proc_groups(name, group):
        return pd.DataFrame({ct.ID_COLUMN: [sample(list(group[ct.ID_COLUMN].values), ct.SAMPLE_SIZE)],
                             ct.CLASS_COLUMN: [name]})

    df = pd.concat([proc_groups(name, group) for name, group in labels_df.groupby([ct.CLASS_COLUMN])])
    return df


def copy_files_in_folder(df_with_ids: pd.DataFrame, src_folder: str, dst_folder: str):
    def copy_file(id_names: List[str]):
        for file_name in id_names:
            copy(src_folder + file_name + '.asm', dst_folder)
            copy(src_folder + file_name + '.bytes', dst_folder)
        return id_names
    df_with_ids[ct.ID_COLUMN].apply(copy_file)


def devide_train_sample_df():
    labels = read_labels(ct.get_path_to_train_labels_csv())
    samples = get_sample_by_labels(labels)
    copy_files_in_folder(df_with_ids=samples,
                         src_folder=ct.get_path_to_train_folder(),
                         dst_folder=ct.get_path_to_train_cut_folder())


if __name__ == '__main__':
    all_data = read_data_in_dict(path_to_folder=ct.get_path_to_train_cut_folder(),
                                 num_of_files=3,
                                 ext=Extention.BYTES,
                                 shuffle_list=True)
    df_train = get_dataset(all_data)
